"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/search";
exports.ids = ["pages/api/search"];
exports.modules = {

/***/ "(api)/./pages/api/search.ts":
/*!*****************************!*\
  !*** ./pages/api/search.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n// Helper function to transform API data to match the Card component's expected format\nfunction transformData(originalData) {\n    // Handle the specific format from the example response\n    if (originalData && typeof originalData === \"object\" && originalData.status === \"success\" && Array.isArray(originalData.data)) {\n        return originalData.data.map((item, index)=>transformItem(item, index));\n    }\n    // If it's already an array, try to transform each item\n    if (Array.isArray(originalData)) {\n        return originalData.map((item, index)=>transformItem(item, index));\n    }\n    // Check if data has a results or products array\n    if (originalData && typeof originalData === \"object\") {\n        if (Array.isArray(originalData.results)) {\n            return originalData.results.map((item, index)=>transformItem(item, index));\n        }\n        if (Array.isArray(originalData.products)) {\n            return originalData.products.map((item, index)=>transformItem(item, index));\n        }\n    }\n    // If we can't find a usable array, return an empty array\n    console.warn(\"Could not find usable data structure in API response\");\n    return [];\n}\n// Transform individual item to match the Card component's expected format\nfunction transformItem(item, index) {\n    // Create a base object with required fields\n    const transformedItem = {\n        id: item.id || `item-${index}`,\n        name: item.name || item.title || \"Product\",\n        description: item.description || \"No description available\",\n        // Extract the first image from the images array if it exists\n        image: item.images && item.images.length > 0 ? item.images[0] : item.image || item.imageUrl || item.image_url || item.img || \"https://via.placeholder.com/400\",\n        price: typeof item.price === \"number\" ? `$${item.price.toFixed(2)}` : item.price || \"$0.00\",\n        // Calculate average rating from reviews if available\n        rating: item.reviews && Array.isArray(item.reviews) && item.reviews.length > 0 ? item.reviews.reduce((sum, review)=>sum + (review.rating || 0), 0) / item.reviews.length : item.rating || 0,\n        // Additional fields that might be needed by the Card component\n        category: item.category || \"Uncategorized\",\n        // Add reviews count if available\n        reviewsCount: item.reviews && Array.isArray(item.reviews) ? item.reviews.length : 0,\n        // Add attributes if available\n        attributes: item.attributes || {},\n        // Preserve any other original fields\n        ...item\n    };\n    return transformedItem;\n}\nasync function handler(req, res) {\n    // Support both POST and GET methods\n    if (req.method !== \"POST\" && req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        // Get query from either POST body or GET query parameter\n        let query;\n        if (req.method === \"POST\") {\n            query = req.body.query;\n        } else {\n            // For GET requests\n            query = Array.isArray(req.query.query) ? req.query.query[0] : req.query.query;\n        }\n        if (!query) {\n            return res.status(400).json({\n                error: \"Query parameter is required\"\n            });\n        }\n        console.log(`Proxy API making ${req.method} request with query:`, query);\n        // First try POST method to the external API\n        try {\n            const response = await fetch(\"https://612d-164-67-70-232.ngrok-free.app/query\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    query\n                })\n            });\n            if (response.ok) {\n                const originalData = await response.json();\n                console.log(\"Proxy API received data from POST:\", JSON.stringify(originalData).substring(0, 200) + \"...\");\n                // Log the structure of the response to help with debugging\n                console.log(\"Response structure:\", {\n                    type: typeof originalData,\n                    isArray: Array.isArray(originalData),\n                    keys: originalData && typeof originalData === \"object\" ? Object.keys(originalData) : \"N/A\",\n                    hasStatus: originalData && typeof originalData === \"object\" && \"status\" in originalData,\n                    hasData: originalData && typeof originalData === \"object\" && \"data\" in originalData,\n                    dataType: originalData && typeof originalData === \"object\" && \"data\" in originalData ? Array.isArray(originalData.data) ? \"array\" : typeof originalData.data : \"N/A\",\n                    dataLength: originalData && typeof originalData === \"object\" && \"data\" in originalData && Array.isArray(originalData.data) ? originalData.data.length : \"N/A\"\n                });\n                // Transform the data to match the expected format\n                const transformedData = transformData(originalData);\n                console.log(`Transformed ${transformedData.length} items`);\n                // Return the transformed data to the client\n                return res.status(200).json({\n                    data: transformedData\n                });\n            } else {\n                console.log(`POST attempt failed with status ${response.status}, trying GET...`);\n            }\n        } catch (postError) {\n            console.log(\"POST request failed, falling back to GET:\", postError);\n        }\n        // If POST failed, try GET method as fallback\n        const encodedQuery = encodeURIComponent(query);\n        const getResponse = await fetch(`https://612d-164-67-70-232.ngrok-free.app/query?query=${encodedQuery}`, {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        });\n        if (!getResponse.ok) {\n            console.error(\"External API error (both POST and GET failed):\", getResponse.status);\n            return res.status(getResponse.status).json({\n                error: `External API error: ${getResponse.status} ${getResponse.statusText}`\n            });\n        }\n        const getOriginalData = await getResponse.json();\n        console.log(\"Proxy API received data from GET:\", JSON.stringify(getOriginalData).substring(0, 200) + \"...\");\n        // Log the structure of the response to help with debugging\n        console.log(\"GET response structure:\", {\n            type: typeof getOriginalData,\n            isArray: Array.isArray(getOriginalData),\n            keys: getOriginalData && typeof getOriginalData === \"object\" ? Object.keys(getOriginalData) : \"N/A\",\n            hasStatus: getOriginalData && typeof getOriginalData === \"object\" && \"status\" in getOriginalData,\n            hasData: getOriginalData && typeof getOriginalData === \"object\" && \"data\" in getOriginalData,\n            dataType: getOriginalData && typeof getOriginalData === \"object\" && \"data\" in getOriginalData ? Array.isArray(getOriginalData.data) ? \"array\" : typeof getOriginalData.data : \"N/A\",\n            dataLength: getOriginalData && typeof getOriginalData === \"object\" && \"data\" in getOriginalData && Array.isArray(getOriginalData.data) ? getOriginalData.data.length : \"N/A\"\n        });\n        // Transform the data to match the expected format\n        const transformedGetData = transformData(getOriginalData);\n        console.log(`Transformed ${transformedGetData.length} items from GET response`);\n        // Return the transformed data to the client\n        return res.status(200).json({\n            data: transformedGetData\n        });\n    } catch (error) {\n        console.error(\"Server error in proxy API:\", error);\n        return res.status(500).json({\n            error: \"Failed to fetch data from external API\"\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/search.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/search.ts"));
module.exports = __webpack_exports__;

})();